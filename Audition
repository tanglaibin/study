一，多线程★：
1，状态
2，同步
3，安全
4，锁

实现方式
通过继承 Thread类实现一个线程 
通过实现 Runnable接口实现一个线程 
   继承扩展性不强， java总只支持单继承，如果一个类继承 Thread就不能继承其他的类了。
怎么启动？
   Thread thread = new Thread(继承了 Thread的对象 /实现了 Runnable的对象 )
   thread.setName(“设置一个线程名称 ”);
   thread.start();
   启动线程使用start方法，而启动了以后执行的是run方法。




2，java的跨平台原理 
由于各操作系统（ windows,liunx等）支持的指令集，不是完全一致的。就会让我们的程序在不同的操作系统上要执行不同程序代码。 
Java开发了适用于不同操作系统及位数的 java虚拟机来屏蔽个系统之间的差异，提供统一的接口。对于我们 java开发者而言，你只需要在不同的系统上安装对应的不同 java虚拟机、这时你的 java程序只要遵循 java规范，就可以在所有的操作系统上面运行 java程序了。

Java通过不同的系统、不同版本、不同位数的java虚拟机(jvm),来屏蔽不同的系统指令集差异而对外体统统一的接口(java API),对于我们普通的java开发者而言，
只需要按照接口开发即可。如果我系统需要部署到不同的环境时，只需在系统上面按照对应版本的虚拟机即可。


3，int占几个字节：
1B=一个字节=8位
Int占 4个字节 4B， 32位
Boolean 1位


4，面向对象的特征有哪些方面：有四大基本特征 :封装、抽象、继承、多态
面向对象的封装性，即将对象封装成一个高度自治和相对封闭的个体，对象状态（属性）由这个对象自己的行为（方法）来读取和改变。
张三这个人，他的姓名等属性，要有自己提供的获取或改变的方法来操作。 private name setName getName
抽象就是找出一些事物的相似和共性之处，然后将这些事物归为一个类，这个类只考虑这些事物的相似和共性之处，并且会忽略与当前主题和目标无关的那些方面，
将注意力集中在与当前目标有关的方面。 就是把现实生活中的对象，抽象为类。
在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，把这个已经存在的类所定义的内容作为自己的内容，并可以加入若干新的内容，
或修改原来的方法使之更适合特殊的需要，这就是继承。遗产继承
多态是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，
即一个引用变量倒底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。


5，集合
Java中的集合分为 value，key--vale(Conllection Map)两种。
存储值有分为 List 和Set.
List是有序的，可以重复的。
Set是无序的，不可以重复的。根据 equals和hashcode判断，也就是如果一个对象要存储在 Set中，必须重写 equals和hashCode方法。
存储key-value的为map.


6，ArrayList和LinkedList的区别 ? 
List常用的 ArrayList和LinkedList。区别和使用场景 ?
ArrayList底层使用时数组。 LinkedList使用的是链表。
数组查询具有所有查询特定元素比较快。而插入和删除和修改比较慢 (数组在内存中是一块连续的内存，如果插入或删除是需要移动内存 )。
链表不要求内存是连续的，在当前元素中存放下一个或上一个元素的地址。查询时需要从头部开始，一个一个的找。所以查询效率低 。插入时不需要移动内存，只需改变引用指向即可。所以插入或者删除的效率高。
 
ArrayList使用在查询比较多，但是插入和删除比较少的情况，而LinkedList使用在查询比较少而插入和删除比较多的情况。


7，HashMap哈HashTable的区别
区别：
HashMap是可以把 null作为key或者value的，而 HashTable是不可以的。 
HashMap是线程不安全的，效率较高。而 HashTalbe是线程安全的，效率较低。 
 
？我想线程安全但是我又想效率高？
通过把整个 Map分为N个Segment（类似 HashTable），可以提供相同的线程安全，但是效率提升 N倍，默认提升 16倍。


8，


HashMap的数据结构是什么？如何实现的。和HashTable，ConcurrentHashMap的区别
Cookie和Session的区别
索引有什么用？如何建索引？
ArrayList是如何实现的，ArrayList和LinkedList的区别？ArrayList如何实现扩容。
事务的实现原理
Spring的IOC容器实现原理，为什么可以通过byName和ByType找到Bean
Spring AOP实现原理

什么是设计模式？常用的设计模式有哪些？ 
设计模式：如模板模式，命令模式，策略模式，适配器模式、桥接模式、装饰模式，观察者模式，状态模式，访问者模式。

设计模式就是经过前人无数次的实践总结出的 ，设计过程中可以反复使用的、可以解决特定问题的设计方法 。

工厂模式 :Spring IOC就是使用了工厂模式，对象的创建交给一个工厂去创建。
代理模式 :Spring AOP就是使用的动态代理。


servlet的生命周期? 
加载Servlet的class---->实例化Servlet----->调用Servlet的init完成初始化
---->响应请求（Servlet的service方法）----->Servlet容器关闭时(Servlet的destory方法)

Servlet启动时，开始加载 servlet生命周期开始。 Servlet被服务器实例化后，容器运行其 init方法，请求到达时运行其 service方法， 
service方法自动派遣运行与请求对应的 doXXX方法（ doGet，doPost）等，当服务器决定将实例销毁的时候 (服务器关闭 )调用其 destroy方法。


Servlet API中forward() 与redirect()的区别？  
forward是服务器端的转向而 redirect是客户端的跳转。 
使用forward浏览器的地址不会发生改变。而 redirect会发生改变。 
Forward是一次请求中完成。而 redirect是重新发起请求。 
Forward是在服务器端完成，而不用客户端重新发起请求，效率较高。 


JSP和Servlet有哪些相同点和不同点? 
JSP是Servlet技术的扩展，所有的 jsp文件都会被翻译为一个继承 HttpServlet的类。也就是 jsp最终也是一个 Servlet.这个Servlet对外提供服务。
Servlet和JSP最主要的不同点在于JSP侧重于视图，Servlet主要用于控制逻辑。
 
Servlet如果要实现 html的功能，必须使用 Writer输出对应的 html,比较麻烦。而 JSP的情况是 Java和HTML可以组合成一个扩展名为 .jsp的文件 ,做界面展示比较方便而嵌入逻辑比较复杂。


jsp有哪些内置对象?作用分别是什么? 
9个内置的对象：  
request 用户端请求，此请求会包含来自 GET/POST请求的参数  
response 网页传回用户端的回应  
pageContext 网页的属性是在这里管理  
session 与请求有关的会话期  
application servlet正在执行的内容  
out 用来传送回应的输出  
config servlet的构架部件  
page JSP网页本身  
exception 针对错误网页，未捕捉的例外  
四大作用域：pageContext request session application 可以通过jstl从四大作用域中取值 .
Jsp传递值 request session application cookie也能传值


session和cookie的区别？
Session和cookie都是会话(Seesion)跟踪技术。Cookie通过在客户端记录信息确定用户身份，Session通过在服务器端记录信息确定用户身份。但是Session的实现依赖于Cookie,sessionId(session的唯一标识需要存放在客户端).
cookie 和session 的区别：
1、cookie数据存放在客户的浏览器上， session数据放在服务器上。
2、cookie不是很安全，别人可以分析存放在本地的 COOKIE并进行COOKIE欺骗
   考虑到安全应当使用 session。
3、session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能 ,考虑到减轻服务器性能方面，应当使用 COOKIE。
4、单个cookie保存的数据不能超过 4K，很多浏览器都限制一个站点最多保存 20个cookie。
5、所以个人建议： 
   将登陆信息 等重要信息存放为 SESSION
   其他信息如果需要保留，可以放在 COOKIE中，比如购物车
 
购物车最好使用cookie，但是cookie是可以在客户端禁用的，这时候我们要使用cookie+数据库的方式实现，当从cookie中不能取出数据时，就从数据库获取。


MVC：
M(Model) 模型 javabean
V(View) 视图  html jsp volicity freemaker
C(Control) 控制器  Servlet,Action
 
Jsp+Servlet+javabean 最经典 mvc模式,实际上就是 model2的实现方式，就是把视图和逻辑隔离开来
使用struts2和springmvc这样的 mvc框架后， jsp+核心控制器 +action+javabean

MVC框架？
是为了解决传统MVC模式(Jsp + Servlet + JavaBean)的一些问题 而出现的框架。

传统MVC模式问题
1，所有的 Servlet和Servlet映射都要配置在 web.xml中，如果项目太大， web.xml就太庞大，并且不能实现模块化管理。 
2，Servlet的主要功能就是接受参数 、调用逻辑 、跳转页面 ，比如像其他字符编码、文件上传等功能也要写在 Servlet中，不能让 Servlet主要功能而需要做处理一下特例。 
3、接受参数比较麻烦 (String name = request.getParameter(“name”),User user=new User user.setName(name))，不能通过 model接收，只能单个接收，接收完成后转换封装 model.
4、跳转页面方式比较单一 (forword,redirect),并且当我的页面名称发生改变时需要修改 Servlet源代码 .
 
现在比较常用的 MVC框架有：
   struts
   webwork
   Struts2
   Spring MVC



事务：
事务是并发控制的单位，是用户定义的一个操作序列。这些操作要么都做，要么都不做，是一个不可分割的工作单位。
一个转账必须 A账号扣钱成功，B账号加钱成功，才算正真的转账成功。
事务必须满足四大特征 :原子性 ,一致性 ,隔离性，持久性 /持续性
 原子性：表示事务内操作不可分割。要么都成功、要么都是失败 .
 一致性：要么都成功、要么都是失败 .后面的失败了要对前面的操作进行回滚。
 隔离性：一个事务开始后，不能后其他事务干扰。
 持久性 /持续性：表示事务开始了，就不能终止。


msyql的分页？Oracle的分页？ 
Mysql是使用关键字 limit来进行分页的  limit offset,size 表示从多少索引去多少位
mysql:
String sql = "select * from students order by id limit " + pageSize*(pageNumber-1) + "," + pageSize;
Oracle的分页使用了三层嵌套查询。
oracle:
String sql = "select * from " +  
(select *,rownum rid from (select * from students order by postime desc) where rid<=" + pagesize*pagenumber + ") as t" +
"where t>" + pageSize*(pageNumber-1);
例子：
select *
        from (select rownum r,
        y.pdu,
        y.version,
        y.subsys,
        y.mibTotal,
        y.mibCoverage
        from(select b.pdu,
        b.version,
        b.module subsys,
        count(distinct b.guid) mibTotal,
        count(distinct m.fk_mib) mibCoverage
        from (select * from t_ens_mib_base a where 1=1
        <if test="mvo.pdu != null and mvo.pdu != '' and mvo.pdu != 'ALL'">
            and a.pdu=#{mvo.pdu}
        </if>
        <if test="mvo.version != null and mvo.version != '' and mvo.version != 'ALL'">
            and a.version=#{mvo.version}
        </if>
        ) b
        LEFT JOIN t_ens_mib_match m on m.fk_mib = b.guid
        group by b.pdu, b.module, b.version
        order by b.pdu, b.version desc)y
        <![CDATA[
				where rownum <= #{mvo.endRow})
				where r > #{mvo.startRow}
			]]>


JDBC:
Java只定义接口，让数据库厂商自己实现接口，对于我们者而言。只需要导入对应厂商开发的实现即可。
然后以接口方式进行调用 (mysql + mysql驱动（实现） +jdbc)

一个简单的jdbc的程序。写一个访问oracle数据的jdbc程序? 
加载驱动(com.mysql.jdbc.Driver,oracle.jdbc.driver.OracleDriver)
获取连接(DriverManager.getConnection(url,usernam,passord))
设置参数  Statement PreparedStatement
           cstmt.setXXX(index, value);
执行   executeQuery executeUpdate
释放连接(是否连接要从小到大，必须放到finnaly)

JDBC中的PreparedStatement相比Statement的好处  
大多数我们都使用PreparedStatement代替Statement

1：PreparedStatement是预编译的，比 Statement速度快 
2：代码的可读性和可维护性
虽然用PreparedStatement来代替Statement会使代码多出几行,但这样的代码无论从可读性还是可维护性上来说.都比直接用 Statement的代码高很多档次：
stmt.executeUpdate("insert into tb_name (col1,col2,col2,col4) values ('"+var1+"','"+var2+"',"+var3+",'"+var4+"')");

perstmt = con.prepareStatement("insert into tb_name (col1,col2,col2,col4) values (?,?,?,?)");
perstmt.setString(1,var1);
perstmt.setString(2,var2);
perstmt.setString(3,var3);
perstmt.setString(4,var4);
perstmt.executeUpdate();
不用我多说,对于第一种方法，别说其他人去读你的代码，就是你自己过一段时间再去读,都会觉得伤心。
 
3：安全性
PreparedStatement可以防止 SQL注入攻击，而 Statement却不能。比如说：
String sql = "select * from tb_name where name= '"+varname+"' and passwd='"+varpasswd+"'";
如果我们把 [' or '1' = '1]作为varpasswd传入进来.用户名随意,看看会成为什么 ?
select * from tb_name = '随意' and passwd = '' or '1' = '1';
因为'1'='1'肯定成立，所以可以任何通过验证，更有甚者：
把[';drop table tb_name;]作为varpasswd传入进来,则：
select * from tb_name = '随意' and passwd = '';drop table tb_name;有些数据库是不会让你成功的，但也有很多数据库就可以使这些语句得到执行。
而如果你使用预编译语句你传入的任何内容就不会和原来的语句发生任何匹配的关系，只要全使用预编译语句你就用不着对传入的数据做任何过虑。而如果使用普通的 statement,有可能要对 drop等做费尽心机的判断和过虑。


AJAX：
通过 AJAX与服务器进行数据交换， AJAX可以使网页实现布局更新。
这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。
  怎么来实现 Ajax XmlHttpRequest对象，使用这个对象可以异步向服务器发送请求，获取获取响应，完成局部更新。 Open send responseText/responseXML 局部响应 .
  使用场景  登陆失败时不跳转页面，注册时提示用户名是否存在 ,二级联动等等使用场景


struts2和springMVC有什么不同？ 
目前企业中使用SpringMvc的比例已经远远超过Struts2,那么两者到底有什么区别，是很多初学者比较关注的问题，下面我们就来对 SpringMvc和Struts2进行各方面的比较 :
 
1. 核 心控制器 （前端控制器、预处理控制器）：对于使用过 mvc框架的人来说这个词应该不会陌生，核心控制器的主要用途是处理所有的请求 ，然后对那些特殊的请求  （控制器）统一的进行处理 (字符编码、文件上传、参数接受、异常处理等等 ),spring mvc核心控制器是Servlet，而Struts2是Filter。
2.控制器实例： Spring Mvc会比Struts快一些（理论上）。 Spring Mvc是基于方法设计 ，而Sturts是基于对象 ，每次发一次请求都会实例一个 action，每个 action都会被注入  属性，而 Spring更像Servlet一样，只有一个实例，每次请求执行对应的方法即可 (注意：由于是单例实例，所以应当避免全局变量的修改，这样会产生线程安全问题 )。
3. 管理方式：大部分的公司的核心架构中，就会使用到spring,而spring mvc又是spring中的一个模块，所以spring对于spring mvc的控制器管理更加简单方便， 而且提供了全  注解方式进行管理，各种功能的注解都比较全面，使用简单，而 struts2需要采用 XML很多的配置参数来管理（虽然也可以采用注解，但是几乎没有公司那  样使用）。
4.参数传递：Struts2中自身提供多种参数接受，其实都是通过（ValueStack）进行传递和赋值，而SpringMvc是通过方法的参数进行接收。
5.学习难度： Struts更加很多新的技术点，比如拦截器、值栈及 OGNL表达式，学习成本较高， springmvc 比较简单，很较少的时间都能上手。
6.intercepter 的实现机制：struts有以自己的interceptor机制，spring mvc用的是独立的AOP方式。这样导致 struts的配置文件量还是比 spring mvc大，虽然 struts的配置能继承，所以我觉得论使用上来讲， spring mvc使用更加简洁，开发效率 Spring MVC确实比 struts2高。spring mvc是方法级别的拦截，一个方法对应一个 request上下文，而方法同时又跟一个 url对应，所以说从架构本身上 spring3 mvc就容易实现 restful url。struts2是类级别的拦截，一个类对应一个 request上下文；实现 restful url要费劲，因为 struts2 action的一个方法可以对应一个 url；而其类属性却被所有方法共享，这也就无法用注解或其他方式标识其所属方法了。 spring3 mvc的方法之间基本上独立的，独享 request response数据，请求数据通过参数获取，处理结果通过 ModelMap交回给框架方法之间不共享变量，而 struts2搞的就比较乱，虽然方法之间  也是独立的，但其所有 Action变量是共享的，这不会影响程序运行，却给我们编码，读程序时带来麻烦。
spring mvc处理ajax请求,直接通过返回数据，方法中使用注解@ResponseBody，spring mvc自动帮我们对象转换为JSON数据。而struts2是通过插件的方式进行处理 
 
在SpringMVC流行起来之前，Struts2在MVC框架中占核心地位，随着SpringMVC的出现，SpringMVC慢慢的取代struts2,但是很多企业都是原来搭建的框架，使用Struts2较多。


spring：
spring是J2EE应用程序框架 ，是轻量级的IoC和AOP的容器框架(相对于重量级的EJB)，主要是针对 javaBean的生命周期进行管理的轻量级容器 ，可以单独使用，也可以和 Struts框架， ibatis框架等组合使用。
 
IOC(Inversion of Control )或DI(Dependency Injection) 
       IOC控制权反转
           原来：我的Service需要调用 DAO，Service就需要创建 DAO
          Spring:Spring发现你 Service依赖于 dao,就给你注入 .
       核心原理：就是配置文件+反射(工厂也可以)+容器(map)  
AOP:面向切面编程 
       核心原理 ：使用动态代理 的设计模式在执行方法前后或出现异常做加入相关逻辑 。
       我们主要使用 AOP来做：
      1、事务处理
      2、权限判断
      3、日志
      4、....


ORM：
对象关系映射（Object Relational Mapping，简称 ORM）模式是一种为了解决面向对象 与关系数据库存在的互不匹配的现象的技术 。简单的说， ORM是通过使用描述对象和数据库之间映射的元数据，将程序中的对象自动持久化到关系数据库中。那么，到底如何实现持久化呢？一种简单的方案是采用硬编码方式(jdbc操作sql方式)，为每一种可能的数据库访问操作提供单独的方法。
这种方案存在以下不足：  
    1.持久化层缺乏弹性。一旦出现业务需求的变更，就必须修改持久化层的接口  
    2.持久化层同时与域模型与关系数据库模型绑定，不管域模型还是关系数据库模型发生变化，都要修改持久化曾的相关程序代码，增加了软件的维护难度。  
 
   ORM提供了实现持久化层的另一种模式 ，它采用映射元数据来描述对象关系的映射，使得 ORM中间件能在任何一个应用的业务逻辑层和数据库层之间充当桥梁。 Java典型的ORM框架有:Hibernate,ibatis(mybatis),speedframework。
   ORM的方法论基于三个核心原则：  
　　   简单：以最基本的形式建模数据。  
　　   传达性：数据库结构被任何人都能理解的语言文档化。  
　　   精确性：基于数据模型创建正确标准化了的结构。


mybatis与Hibernate有什么不同?
相同点：
   都是java中orm框架、屏蔽 jdbc api的底层访问细节，使用我们不用与 jdbc api打交道，就可以完成对数据库的持久化操作 。jdbc api编程流程固定，还将 sql语句与 java代码混杂在了一起，经常需要拼凑 sql语句，细节很繁琐。
   ibatis的好处：屏蔽 jdbc api的底层访问细节；将 sql语句与 java代码进行分离 ;提供了将结果集自动封装称为实体对象和对象的集合的功能 .queryForList返回对象集合，用 queryForObject返回单个对象；提供了自动将实体对象的属性传递给 sql语句的参数。
 
   Hibername的好处： Hibernate是一个全自动的 orm映射工具，它可以自动生成 sql语句，并执行并返回 java结果。
 
不同点：
   1、hibernate要比ibatis功能强大很多。因为 hibernate自动生成 sql语句。
   2、ibatis需要我们自己在 xml配置文件中写 sql语句， hibernate我们无法直接控制该语句，我们就无法去写特定的高效率的 sql。对于一些不太复杂的 sql查询， hibernate可以很好帮我们完成，但是，对于特别复杂的查询， hibernate就很难适应了，这时候用 ibatis就是不错的选择，因为 ibatis还是由我们自己写 sql语句。
  ibatis可以出来复杂语句，而hibernate不能。
   3、ibatis要比hibernate简单的多。 ibatis是面向 sql的，不同考虑对象间一些复杂的映射关系。


抽象类与接口区别：

抽象类就是为了继承而存在的。
包含抽象方法的类称为抽象类，但抽象类中不是只能有抽象方法，它和普通类一样，同样可以拥有成员变量和普通的成员方法。
注意，抽象类和普通类的主要有三点区别：
1）抽象方法必须为public或者protected（因为如果为private，则不能被子类继承，子类便无法实现该方法），缺省情况下默认为public。
2）抽象类不能用来创建对象；
3）如果一个类继承于一个抽象类，则子类必须实现父类的抽象方法。如果子类没有实现父类的抽象方法，则必须将子类也定义为为abstract类。
在其他方面，抽象类和普通的类并没有区别。

接口，泛指供别人调用的方法或者函数，抽象类是对一种事物的抽象，即对类抽象，而接口是对行为的抽象。
接口中的变量会被隐式地指定为public static final变量,方法会被隐式地指定为public abstract方法,且接口中所有的方法不能有具体的实现。

接口和抽象类的区别，接口是一种极度抽象的类型，它比抽象类更加“抽象”，
一个类只能继承一个抽象类，而一个类却可以实现多个接口。

抽象类是对整个类整体进行抽象，包括属性、行为，但是接口却是对类局部（行为）进行抽象。
举个简单的例子，飞机和鸟是不同类的事物，但是它们都有一个共性，就是都会飞。那么在设计的时候，可以将飞机设计为一个类Airplane，
将鸟设计为一个类Bird，但是不能将 飞行 这个特性也设计为类，因此它只是一个行为特性，并不是对一类事物的抽象描述。
此时可以将 飞行 设计为一个接口Fly，包含方法fly( )，然后Airplane和Bird分别根据自己的需要实现Fly这个接口。
然后至于有不同种类的飞机，比如战斗机、民用飞机等直接继承Airplane即可，对于鸟也是类似的，不同种类的鸟直接继承Bird类即可。
从这里可以看出，继承是一个 "是不是"的关系，而 接口 实现则是 "有没有"的关系。如果一个类继承了某个抽象类，则子类必定是抽象类的种类，
而接口实现则是有没有、具备不具备的关系，比如鸟是否能飞（或者是否具备飞行这个特点），能飞行则可以实现这个接口，
不能飞行就不实现这个接口。

抽象类作为很多子类的父类，它是一种模板式设计。而接口是一种行为规范，它是一种辐射式设计。什么是模板式设计？
最简单例子，大家都用过ppt里面的模板，如果用模板A设计了ppt B和ppt C，ppt B和ppt C公共的部分就是模板A了，如果它们的公共部分需要改动，
则只需要改动模板A就可以了，不需要重新对ppt B和ppt C进行改动。而辐射式设计，比如某个电梯都装了某种报警器，一旦要更新报警器，
就必须全部更新。也就是说对于抽象类，如果需要添加新的方法，可以直接在抽象类中添加具体的实现，子类可以不进行变更；而对于接口则不行，
如果接口进行了变更，则所有实现这个接口的类都必须进行相应的改动。

门和警报的例子：门都有open( )和close( )两个动作，此时我们可以定义通过抽象类和接口来定义这个抽象概念：
abstract class Door {
    public abstract void open();
    public abstract void close();
}
　　或者：
interface Door {
    public abstract void open();
    public abstract void close();
}
但是现在如果我们需要门具有报警alarm( )的功能，那么该如何实现？下面提供两种思路：
1）将这三个功能都放在抽象类里面，但是这样一来所有继承于这个抽象类的子类都具备了报警功能，但是有的门并不一定具备报警功能；
2）将这三个功能都放在接口里面，需要用到报警功能的类就需要实现这个接口中的open( )和close( )，
也许这个类根本就不具备open( )和close( )这两个功能，比如火灾报警器。
从这里可以看出， Door的open() 、close()和alarm()根本就属于两个不同范畴内的行为，open()和close()属于门本身固有的行为特性，
而alarm()属于延伸的附加行为。因此最好的解决办法是单独将报警设计为一个接口，包含alarm()行为,Door设计为单独的一个抽象类，
包含open和close两种行为。再设计一个报警门继承Door类和实现Alarm接口。


VUE的生命周期：






















